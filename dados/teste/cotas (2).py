# -*- coding: utf-8 -*-
"""cotas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGUoGXrkH0jAe8SymhunzE21QWg6Rhto

### Baixar a planilha e importar bibliotecas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
!pip install cryptography
from cryptography.fernet import Fernet
import re
import datetime as dt
from google.colab import files

tabelaPrinc = pd.read_excel("/content/planilhaJoinCriptografada.xlsx")

"""### Formatar o ano/periodo"""

colunas = ['SEXO', 'DT_NASCIMENTO', 'FORMA_INGRESSO',
       'FORMA_EVASAO',
       'PERIODO_INGRESSO', 'DT_EVASAO', 'PERIODO_EVASAO']
tabelaPrinc = tabelaPrinc.filter(colunas)

df = pd.DataFrame(tabelaPrinc['PERIODO_EVASAO'].str.split('/', expand=True))
df.columns = ['ANO_EVASAO', 'PERIODO_EVASAO']

linhasPeriodoEvasao = df['PERIODO_EVASAO']
colunaSemestre = []
for linha in linhasPeriodoEvasao:
  colunaSemestre.append(re.sub('\D', '', str(linha)))

df['PERIODO_EVASAO'] = colunaSemestre
#tabelaPrinc.rename(columns = {'PERIODO_EVASAO':'ANO_EVASAO'}, inplace = True)

linhasPeriodoEvasao = df['PERIODO_EVASAO']
linhasAnoEvasao = df['ANO_EVASAO']
colunaFormatada = []
for linhaAno, linhaColuna in zip(linhasAnoEvasao,linhasPeriodoEvasao):
  stringFormatada = str(linhaAno) + '.' + str(linhaColuna)
  colunaFormatada.append(stringFormatada)

#tabelaPrinc['ANO_EVASAO'] = colunaFormatada
tabelaPrinc['PERIODO_EVASAO'] = df['PERIODO_EVASAO']
tabelaPrinc['PER_EVASAO_FORMAT'] = colunaFormatada
tabelaPrinc['ANO_EVASAO'] = df['ANO_EVASAO']

df1 = pd.DataFrame(tabelaPrinc['PERIODO_INGRESSO'].str.split('/', expand=True))
df1.columns = ['ANO_INGRESSO', 'PERIODO_INGRESSO']

linhasPeriodoIngresso = df1['PERIODO_INGRESSO']
colunaSemestreIngresso = []
for linha in linhasPeriodoIngresso:
  colunaSemestreIngresso.append(re.sub('\D', '', str(linha)))

df1['PERIODO_INGRESSO'] = colunaSemestreIngresso
#tabelaPrinc.rename(columns = {'PERIODO_INGRESSO':'ANO_INGRESSO'}, inplace = True)

linhasPeriodoIngresso = df1['PERIODO_INGRESSO']
linhasAnoIngresso = df1['ANO_INGRESSO']
colunaFormatada = []
for linhaAno, linhaColuna in zip(linhasAnoIngresso,linhasPeriodoIngresso):
  stringFormatada = str(linhaAno) + '.' + str(linhaColuna)
  colunaFormatada.append(stringFormatada)

#tabelaPrinc['ANO_INGRESSO'] = colunaFormatada
tabelaPrinc['PERIODO_INGRESSO'] = df1['PERIODO_INGRESSO']
tabelaPrinc['PER_INGRESSO_FORMAT'] = colunaFormatada
tabelaPrinc['ANO_INGRESSO'] = df1['ANO_INGRESSO']

"""### Acertando a tipagem"""

tabelaPrinc.dtypes

tabelaPrinc['ANO_INGRESSO'] = tabelaPrinc["ANO_INGRESSO"].apply(str)

tabelaPrinc["SEXO"]  = tabelaPrinc["SEXO"].apply(str)
tabelaPrinc["DT_NASCIMENTO"]  = pd.to_datetime(tabelaPrinc['DT_NASCIMENTO'])
tabelaPrinc["FORMA_INGRESSO"]  = tabelaPrinc['FORMA_INGRESSO'].astype(str)
tabelaPrinc["FORMA_EVASAO"]  = tabelaPrinc['FORMA_EVASAO'].astype(str)
tabelaPrinc["PERIODO_INGRESSO"]  = pd.to_numeric(tabelaPrinc['PERIODO_INGRESSO'])
tabelaPrinc["DT_EVASAO"]  = pd.to_datetime(tabelaPrinc['DT_EVASAO'])
tabelaPrinc["PERIODO_EVASAO"]  = pd.to_numeric(tabelaPrinc['PERIODO_EVASAO'])
#tabelaPrinc["PER_EVASAO_FORMAT"]  = tabelaPrinc['PER_EVASAO_FORMAT'].astype(str)
tabelaPrinc["ANO_EVASAO"]  = pd.to_numeric(tabelaPrinc['ANO_EVASAO'])
tabelaPrinc["PER_INGRESSO_FORMAT"]  = tabelaPrinc['PER_INGRESSO_FORMAT'].astype(str)
tabelaPrinc['ANO_INGRESSO'] = pd.to_numeric(tabelaPrinc['ANO_INGRESSO'])

tabelaPrinc

"""### Analise Cotas"""

tabelaPrinc[0:5]

dfCotistas = tabelaPrinc.groupby(['FORMA_INGRESSO']).size().reset_index(name='ALUNOS')

dfCotistas

"""Foi no decreto 7824, de 11 de outubro de 2012 que a Lei 12.711, conhecida como Lei de Cotas, entrou em vigor. Essa lei obrigou todos as instituições de ensino superior público deveriam reservar uma porcentagem das suas vagas para alunos oriundos de **escola publica**, de **baixa renda**, **pretos**, **pardos** e **indígenas**.

Tipos de Cotas:
* SISU Escola Publica - Independente de Renda	
* SISU Escola Publica - até 1,5 Salario Minimo
* SISU Escola Publica - até 1,5 Salario Minimo : Preto, Pardo, Indígena
* SISU Escola Publica - Independente de Renda  : Preto, Pardo, Indígena

Ao analisar os dados da planilha, foram identificados esses tipos:

*   SISU Escola Publica - Independente de Renda	
*   SISU Escola Publica - até 1,5 Salario Minimo
*   SISU Escola Publica - até 1,5 Salario Minimo : Preto, Pardo, Indígena
*   SISU Escola Publica - Independente de Renda  : Preto, Pardo, Indígena
*   SISU Escola Pública - até 1,5 Salario Minimo : Preto e Pardo
*   SISU Escola Pública - até 1,5 Salario Minimo : Índio
*   SISU Escola Pública - Independente de Renda  : Preto e Pardo
*   SISU Escola Pública - Independente de Renda  : Índio


Há uma quebra das categorias "até 1,5 SM: Preto, Pardo e Indígena" e "Independente da Renda: Preto, Pardo e Indígena" em "Pretos e Pardos" e "Indígenas", acredito que isso se deva ao fato de ter vagas separadas para autodeclaração de "Indígena" e "Pretos e Pardos", por fazerem partes de minorias sociais diferentes.
"""

pd.set_option('display.max_colwidth', None)

"""
### Pegando todo mundo que entrou depois de 2013 (quando as cotas entraram em vigor)"""

arrayAnos = [2013,2014,2015,2016,2017,2018,2019,2020,2021] #periodos a partir do comeco da pandemia 
dfCotas = tabelaPrinc[tabelaPrinc['ANO_INGRESSO'].isin(arrayAnos)]

dfCotas

"""
#### Classificar todas as formas de ingresso a partir de 2013 

**Estou com dificuldade de caracterizar as informacoes abaixo**
<br>
*Gostaria de identificar o que são todas as formas de ingresso e em qual classificacao ela se encaxiaria*"""

dfCotistas = dfCotas.groupby(['FORMA_INGRESSO']).size().reset_index(name='ALUNOS')

dfCotistas

"""
### Categorizando alunos por concluido, evadido e cursando"""

historicoIngresso = tabelaPrinc.groupby(['PER_INGRESSO_FORMAT']).size().reset_index(name='ALUNOS')
historicoIngresso

historicoEvasao = tabelaPrinc.groupby(['PER_EVASAO_FORMAT']).size().reset_index(name='ALUNOS')
historicoEvasao = historicoEvasao.dropna()
historicoEvasao = historicoEvasao[historicoEvasao.PER_EVASAO_FORMAT.str.contains('nan.') == False]
historicoIngresso

evasoesDF = tabelaPrinc.groupby(['ANO_EVASAO','FORMA_EVASAO'], dropna=False).size().reset_index(name='ALUNOS')

evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('ABA - Abandono do curso', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('APO - Aluno Especial - Disciplina Isolada', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('APO -Conclusão a Mobilidade Acadêmica Externa - ANDIFES', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('APO -Conclusão da Mobilidade Acadêmica Externa - IAE/IESCE', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('Desistência SiSU', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('JUB - Jubilamento', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('CAN - Cancelamento Geral do curso', 'Evasão') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('CON - Curso concluído', 'Concluído') 
evasoesDF['FORMA_EVASAO'] = evasoesDF.FORMA_EVASAO.str.replace('Sem evasão', 'Cursando')

evasoesDF.loc[evasoesDF['FORMA_EVASAO'] == 'Não identificada (vide pasta do aluno)' , 'FORMA_EVASAO'] = 'Evasão'
evasoesDF.loc[evasoesDF['ANO_EVASAO'].isna() , 'ANO_EVASAO'] = 2023

#agrupando pelo campo forma evasao e somando a coluna de alunos

evasoesDF = evasoesDF.groupby(['ANO_EVASAO','FORMA_EVASAO'] , as_index=False)['ALUNOS'].sum()

evasoesDF

"""### Fazer relacao entre os alunos ampla concorrencia e os cotistas



1.   Fazer a comparacao dos cotistas com todo o curso ao longo dos anos
2.   Fazer a comparacao dos cotistas com todo o curso a partir de 2013

#### Relacao entre todos os alunos
"""

ingressosDF =  tabelaPrinc.groupby(['FORMA_INGRESSO']).size().reset_index(name='ALUNOS')

ingressosDF

arrayFormas = ingressosDF['FORMA_INGRESSO'].array
arrayFormas

arrayAlunos = ingressosDF['ALUNOS'].array
soma = arrayAlunos.sum()
soma

ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('AE - Aluno Especial - Disciplina Isolada', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('AE - Mobilidade Acadêmica IAE/IESCE', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('AE - Mobilidade Adadêmica Externa - ANDIFES', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('DJ - Decisão Judicial', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('EO -Transferência Ex-Ofício', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('PD - Portador de Diploma de Nível Superior', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('PG - Programa de Estudantes - Convênio (PEC-G)', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('Pessoas com Deficiência', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('TC - Transferência Interna-Curso não relacionado ao anterior', 'Outros') 
ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('TE - Transferência Externa - oriunda de outra instituição', 'Outros') 
# ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('VE - Vestibular', 'Ampla Concorrencia(Vestibular)') 
# ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('EN - ENEM', 'Ampla Concorrencia(ENEM)') 

ingressosDF.loc[ingressosDF['FORMA_INGRESSO'] == 'PG - Programa de Estudantes - Convênio (PEC-G)' , 'FORMA_INGRESSO'] = 'Outros'

ingressosDF =  ingressosDF.groupby(['FORMA_INGRESSO'], as_index=False)['ALUNOS'].sum()

"""#### Relacao entre os alunos apos 2013"""

ingressos2013DF =  dfCotas.groupby(['FORMA_INGRESSO']).size().reset_index(name='ALUNOS')

ingressos2013DF

ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('AE - Aluno Especial - Disciplina Isolada', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('AE - Mobilidade Acadêmica IAE/IESCE', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('AE - Mobilidade Adadêmica Externa - ANDIFES', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('DJ - Decisão Judicial', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('EO -Transferência Ex-Ofício', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('PD - Portador de Diploma de Nível Superior', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('PG - Programa de Estudantes - Convênio (PEC-G)', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('Pessoas com Deficiência', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('TC - Transferência Interna-Curso não relacionado ao anterior', 'Outros') 
ingressos2013DF['FORMA_INGRESSO'] = ingressos2013DF.FORMA_INGRESSO.str.replace('TE - Transferência Externa - oriunda de outra instituição', 'Outros') 
# ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('VE - Vestibular', 'Ampla Concorrencia(Vestibular)') 
# ingressosDF['FORMA_INGRESSO'] = ingressosDF.FORMA_INGRESSO.str.replace('EN - ENEM', 'Ampla Concorrencia(ENEM)') 

ingressos2013DF.loc[ingressos2013DF['FORMA_INGRESSO'] == 'PG - Programa de Estudantes - Convênio (PEC-G)' , 'FORMA_INGRESSO'] = 'Outros'

ingressos2013DF =  ingressos2013DF.groupby(['FORMA_INGRESSO'], as_index=False)['ALUNOS'].sum()

"""### Fazer uma comparacao dos alunos por genero


*   Analisar relacoes homem x mulher no curso
*   Analisar quantos homens temos de ampla concorrencia
*   Analisar quantas mulheres temos de ampla concorrencia
*   Analisar quantos homens temos de cotista
*   Analisar quantas mulheres temos de cotistas
*   Analisar a relacao entre homens ampla concorrencia e homens cotistas
*   Analisar a relacao entre mulheres ampla concorrencia e mulheres cotistas

## Aqui ficam os downloados dos DataFrames criados
"""

from google.colab import files

#baixa DF principal formatada
tabelaPrinc.to_csv('dfPrincipal.csv') 
files.download('dfPrincipal.csv')

#
dfCotistas.to_csv('dfCotasPie.csv') 
files.download('dfCotasPie.csv')

#
evasoesDF.to_csv('dfEvasao.csv')
files.download('dfEvasao.csv')

#Baixar DF responsavel por relacionar e categorizar os alunos por forma de ingresso
ingressosDF.to_csv('dfIngresso.csv')
files.download('dfIngresso.csv')

#Baixar DF responsavel por relacionar e categorizar os alunos por forma de ingresso
ingressosDF.to_csv('dfIngresso.csv')
files.download('dfIngresso.csv')
ingressos2013DF