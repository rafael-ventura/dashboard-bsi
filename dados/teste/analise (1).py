# -*- coding: utf-8 -*-
"""analise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w-0E_SCGJI3484oKHjLmtL_g81g3XhoL

# Analise dos dados

## Formatacao do DataFrame

### Preparando Arquivo a ser lido
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
!pip install cryptography
from cryptography.fernet import Fernet
import re
import datetime as dt
from google.colab import files

tabelaPrinc = pd.read_excel("/content/planilhaCriptografada.xlsx")

"""### Formatando o dataframe"""

colunas = ['SEXO', 'DT_NASCIMENTO', 'FORMA_INGRESSO',
       'FORMA_EVASAO', 'NUM_VERSAO',
       'PERIODO_INGRESSO', 'DT_EVASAO', 'PERIODO_EVASAO']
tabelaPrinc = tabelaPrinc.filter(colunas)
tabelaPrinc[0:5]

"""### Formatar o ano/periodo"""

df = pd.DataFrame(tabelaPrinc['PERIODO_EVASAO'].str.split('/', expand=True))
df.columns = ['ANO_EVASAO', 'PERIODO_EVASAO']

linhasPeriodoEvasao = df['PERIODO_EVASAO']
colunaSemestre = []
for linha in linhasPeriodoEvasao:
  colunaSemestre.append(re.sub('\D', '', str(linha)))

df['PERIODO_EVASAO'] = colunaSemestre
#tabelaPrinc.rename(columns = {'PERIODO_EVASAO':'ANO_EVASAO'}, inplace = True)

linhasPeriodoEvasao = df['PERIODO_EVASAO']
linhasAnoEvasao = df['ANO_EVASAO']
colunaFormatada = []
for linhaAno, linhaColuna in zip(linhasAnoEvasao,linhasPeriodoEvasao):
  stringFormatada = str(linhaAno) + '.' + str(linhaColuna)
  colunaFormatada.append(stringFormatada)

#tabelaPrinc['ANO_EVASAO'] = colunaFormatada
tabelaPrinc['PERIODO_EVASAO'] = df['PERIODO_EVASAO']
tabelaPrinc['PER_EVASAO_FORMAT'] = colunaFormatada
tabelaPrinc['ANO_EVASAO'] = df['ANO_EVASAO']

df1 = pd.DataFrame(tabelaPrinc['PERIODO_INGRESSO'].str.split('/', expand=True))
df1.columns = ['ANO_INGRESSO', 'PERIODO_INGRESSO']

linhasPeriodoIngresso = df1['PERIODO_INGRESSO']
colunaSemestreIngresso = []
for linha in linhasPeriodoIngresso:
  colunaSemestreIngresso.append(re.sub('\D', '', str(linha)))

df1['PERIODO_INGRESSO'] = colunaSemestreIngresso
#tabelaPrinc.rename(columns = {'PERIODO_INGRESSO':'ANO_INGRESSO'}, inplace = True)

linhasPeriodoIngresso = df1['PERIODO_INGRESSO']
linhasAnoIngresso = df1['ANO_INGRESSO']
colunaFormatada = []
for linhaAno, linhaColuna in zip(linhasAnoIngresso,linhasPeriodoIngresso):
  stringFormatada = str(linhaAno) + '.' + str(linhaColuna)
  colunaFormatada.append(stringFormatada)

#tabelaPrinc['ANO_INGRESSO'] = colunaFormatada
tabelaPrinc['PERIODO_INGRESSO'] = df1['PERIODO_INGRESSO']
tabelaPrinc['PER_INGRESSO_FORMAT'] = colunaFormatada
tabelaPrinc['ANO_INGRESSO'] = df1['ANO_INGRESSO']

tabelaPrinc

"""### Acertando a tipagem"""

tabelaPrinc.dtypes

tabelaPrinc["SEXO"]  = tabelaPrinc["SEXO"].apply(str)
tabelaPrinc["DT_NASCIMENTO"]  = pd.to_datetime(tabelaPrinc['DT_NASCIMENTO'])
tabelaPrinc["FORMA_INGRESSO"]  = tabelaPrinc['FORMA_INGRESSO'].astype(str)
tabelaPrinc["FORMA_EVASAO"]  = tabelaPrinc['FORMA_EVASAO'].astype(str)
tabelaPrinc["PERIODO_INGRESSO"]  = pd.to_numeric(tabelaPrinc['PERIODO_INGRESSO'])
tabelaPrinc["DT_EVASAO"]  = pd.to_datetime(tabelaPrinc['DT_EVASAO'])
tabelaPrinc["PERIODO_EVASAO"]  = pd.to_numeric(tabelaPrinc['PERIODO_EVASAO'])
#tabelaPrinc["PER_EVASAO_FORMAT"]  = tabelaPrinc['PER_EVASAO_FORMAT'].astype(str)
tabelaPrinc["ANO_EVASAO"]  = pd.to_numeric(tabelaPrinc['ANO_EVASAO'])
tabelaPrinc["PER_INGRESSO_FORMAT"]  = tabelaPrinc['PER_INGRESSO_FORMAT'].astype(str)
tabelaPrinc['ANO_INGRESSO'] = pd.to_numeric(tabelaPrinc['ANO_INGRESSO'])

tabelaPrinc

"""## Montagem gráficos"""

historicoIngresso = tabelaPrinc.groupby(['PER_INGRESSO_FORMAT']).size().reset_index(name='ALUNOS')
historicoIngresso

historicoEvasao = tabelaPrinc.groupby(['PER_EVASAO_FORMAT']).size().reset_index(name='ALUNOS')
historicoEvasao = historicoEvasao.dropna()
historicoEvasao = historicoEvasao[historicoEvasao.PER_EVASAO_FORMAT.str.contains('nan.') == False]
#historicoEvasao = historicoEvasao[tabelaPrinc.FORMA_EVASAO.str.contains("concluidos = 'CON - Curso concluído'") == False]

historicoIngresso
historicoEvasao

fig, ax = plt.subplots(figsize=(20,10))
plt.bar([i*2 for i in range(42)] , historicoIngresso['ALUNOS'], label= 'Ingressantes')
plt.xticks([i*2 for i in range(42)], historicoIngresso['PER_INGRESSO_FORMAT'])
plt.xlabel("Períodos")
plt.ylabel("Numero de Estudantes")
for tick in ax.get_xticklabels():
    tick.set_rotation(90)
plt.title("Quantidade de alunos ingressantes por período")
plt.legend()
plt.show()

cases = [1000, 2000, 5000, 8000, 15000, 6000]
plt.figure( figsize=(30, 15)) # alterar tamanho
plt.bar(historicoEvasao['PERIODO_EVASAO'], historicoEvasao['ALUNOS'], label= 'Evadidos')
plt.xlabel("Períodos")
plt.ylabel("Numero de Estudantes")
plt.title("Quantidade de alunos evadidos por período")
plt.legend()
plt.show()

cases = [1000, 2000, 5000, 8000, 15000, 6000]
plt.figure( figsize=(30, 15)) # alterar tamanho
plt.bar(historicoEvasao['PERIODO_EVASAO'], historicoEvasao['ALUNOS'], label= 'Evadidos')
plt.xlabel("Períodos")
plt.ylabel("Numero de Estudantes")
plt.title("Quantidade de alunos evadidos por período")
plt.legend()
plt.show()

arrayStrings = ['2001.1','2001.2','2002.1','2002.2','2004.1'] #periodos que nao tiveram evasao
ingressoFormatado = historicoIngresso[~historicoIngresso['PERIODO_INGRESSO'].isin(arrayStrings)]
X = ingressoFormatado['PERIODO_INGRESSO']
Ygirls = historicoEvasao['ALUNOS']
Zboys = ingressoFormatado['ALUNOS']
Zboys = Zboys.reset_index(drop=True)

X_axis = np.arange(len(historicoEvasao))
plt.figure( figsize=(30, 15)) # alterar tamanho
bar1 = plt.bar(X_axis -  0.2 , Ygirls, 0.4, label = 'Evadidos')


bar2 = plt.bar(X_axis +  0.2, Zboys, 0.4, label = 'Ingressantes')

plt.xticks(X_axis, X)
plt.xlabel("Períodos")
plt.ylabel("Numero de Estudantes")
plt.title("Relacao de Estudantes Ingressantes e Evadidados Por Período")
plt.legend()

plt.show()



"""Para cada período analisado, quantos alunos daqueles período evadiram e quando eles evadiram?  

Qual foi o motivo da evasão ?





"""

condicoes = ['CON - Curso concluído', 'Sem evasão']
df = tabelaPrinc.groupby(['PERIODO_INGRESSO','FORMA_EVASAO','PERIODO_EVASAO']).size().reset_index(name='ALUNOS')
df = df[~df['FORMA_EVASAO'].isin(condicoes)] #FILTRA TODO MUNDO QUE ESTA COM AS CONDICOES PASSADAS, PEGANDO O NEGATIVO DISSO


#df = df[df['ANO_INGRESSO'] == '2011.1']
df

dfMotivo =  tabelaPrinc.groupby(['FORMA_EVASAO']).size().reset_index(name='ALUNOS')
dfMotivo = dfMotivo[~dfMotivo['FORMA_EVASAO'].isin(condicoes)]
pd.set_option('display.max_colwidth', None)
dfMotivo

plt.rcParams["figure.figsize"] = [20, 12]
plt.rcParams["figure.autolayout"] = True

labels = dfMotivo['FORMA_EVASAO']
sizes = dfMotivo['ALUNOS']
explode = (0, 0, 0, 0,0,0,0,0)  # only "explode" the 2nd slice (i.e. 'Hogs')

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, autopct='%1.1f%%',
        shadow=True, startangle=90, radius=10,)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
ax1.legend(labels)
plt.show()

dfMotivo =  tabelaPrinc.groupby(['FORMA_EVASAO']).size().reset_index(name='ALUNOS')
dfMotivo = dfMotivo[dfMotivo['FORMA_EVASAO'].isin(condicoes)]
pd.set_option('display.max_colwidth', None)
dftemp0 =  tabelaPrinc.groupby(['FORMA_EVASAO']).size().reset_index(name='ALUNOS')
dftemp = dftemp0[~dftemp0['FORMA_EVASAO'].isin(condicoes)]
dftemp
sums=dftemp["ALUNOS"].sum()
dftemp2 = {'FORMA_EVASAO': 'Evasão', 'ALUNOS': sums}
dfMotivo = dfMotivo.append(dftemp2, ignore_index = True)
dfMotivo['FORMA_EVASAO'] = dfMotivo.FORMA_EVASAO.str.replace('Sem evasão', 'Em andamento') 
dfMotivo = dfMotivo.sort_values(by=['ALUNOS'], ascending=False)
dfMotivo

X = dfMotivo['FORMA_EVASAO']
conc = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("CON - Curso concluído") == True]
andam = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("Em andamento") == True]
evas = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("Evasão") == True]

X_axis = np.arange(len(dfMotivo))
plt.figure( figsize=(20, 10)) # alterar tamanho


bar3 = plt.bar(1.1 , evas, 0.1, label = 'Evasão')
bar2 = plt.bar(1 , andam, 0.1, label = 'Cursando')
bar1 = plt.bar(0.9 ,conc , 0.1, label = 'Formados')


plt.ylabel("Numero de Estudantes")
plt.title("Relacao de Estudantes Formandos, Cursantes e Evadidados Por Período")
plt.legend()

plt.show()

conc = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("CON - Curso concluído") == True]
andam = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("Evasão") == True]
evas = dfMotivo.ALUNOS[dfMotivo.FORMA_EVASAO.str.contains("Sem evasão") == True]
andam

"""### Duvidas

*   Existe alguma maneira de categorizar os alunos que concluíram e os que estão em andamento?  <br> **R:** Sim, através do campo *FORMA_EVASAO*
*   A gente consegue ter acesso a data de conclusão desses alunos, caso tenham concluído? <br> **R:** Sim, através do campo *DT_EVASAO*

## Dividindo um data frame por anos
"""

dtTemp = tabelaPrinc[~tabelaPrinc['PER_EVASAO_FORMAT'].isna()]
dataframe1= pd.to_numeric(dtTemp['ANO_EVASAO'])
dataframe1 = (dtTemp[dtTemp['ANO_EVASAO'] == 2011])
dataframe1

dtTemp

temp03.info()

temp03

tabelaPrinc.info()

a = tabelaPrinc['DT_EVASAO'].dt.year
a

temp03 = tabelaPrinc[~tabelaPrinc['DT_EVASAO'].dt.year.isna()]
temp03['year'] = tabelaPrinc['DT_EVASAO'].dt.year
#temp03['year'] = temp03['year'].astype(int)

dictAnos = {}
for y in temp03['year']:
  dictAnos[y] = tabelaPrinc[tabelaPrinc['DT_EVASAO'].dt.year == y]

for y, df in dictAnos.items():
  print(dictAnos[y])

dictAnos[2004]

historicoEvasao['ANO'] = historicoEvasao['DT_EVASAO'].dt.year

plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True

def createGraphs(x):
   return plt.plot(dictAnos[x]['DT_EVASAO'], dictAnos[x]['DT_EVASAO'], color='red')

for i,y in dictAnos.items():
  plt.figure()
  plt.plot()
  fig, ax = plt.subplots()        
  ax.plot(x, y)
  createGraphs(y)

plt.show()

from google.colab import files
historicoEvasao.to_csv('dfCleaned.csv') 
files.download('dfCleaned.csv')

historicoEvasao['Start'] =  
starting_day_of_current_year = datetime.now().date().replace(month=1, day=1)    
ending_day_of_current_year = datetime.now().date().replace(month=12, day=31)

del historicoEvasao['START']

historicoEvasao['INICIO'] = historicoEvasao['DT_EVASAO']
historicoEvasao['INICIO'] = pd.to_datetime(historicoEvasao['INICIO'])
for y in historicoEvasao['ANO']:
  historicoEvasao.loc[historicoEvasao.ANO == y,'INICIO'] = dt.date.min.replace(year =y)

historicoEvasao['FIM'] = historicoEvasao['DT_EVASAO']
historicoEvasao['FIM'] = pd.to_datetime(historicoEvasao['FIM'])
for y in historicoEvasao['ANO']:
  historicoEvasao.loc[historicoEvasao.ANO == y,'FIM'] = dt.date.max.replace(year = y)

historicoEvasao

historicoIngressoAux = historicoEvasao.groupby(['ANO']).size().reset_index(name='ALUNOS')

historicoIngressoAux

historicoIngressoporAno = historicoIngressoporData.groupby(['ANO'],as_index=False).agg({'ANO':'first', 'DT_EVASAO': 'first','PERIODO_EVASAO':'first','INICIO':'first','FIM':'first','ALUNOS':'sum'})

historicoIngressoporAno

from google.colab import files
historicoIngressoporAno.to_csv('dfAno.csv') 
files.download('dfAno.csv')

#historicoIngressoMerged = pd.merge(historicoEvasao,historicoIngressoAux)
historicoIngressoporData = historicoEvasao.merge(historicoIngressoAux, on='ANO', how='left',suffixes=('', '_DROP')).filter(regex='^(?!.*_DROP)')

historicoIngressoporData

historicoIngressoporData["MES_EVASAO"] = historicoIngressoporData["DT_EVASAO"].dt.to_period('M')

from google.colab import files
historicoIngressoporData.to_csv('dfData.csv') 
files.download('dfData.csv')

df['INICIO'] = historicoEvasao['INICIO']
df['FIM'] = historicoEvasao['FIM']
df['ANO'] = historicoEvasao['ANO']

df

"""# Anotando o que deve ser feito

## Primeira Tarefa

**A primeira tarefa** de vocês é verificar os **alunos de cada turma pela forma de evasão.** Por exemplo, quantos se formaram, abandonaram, etc na turma 2018.1?

1. Plotar gráfico de anos onde

>  o eixo X vai ser o motivo de evasão do aluno 

>  o eixo Y vai ser a quantidade de alunos evadidos

<br> No eixo X, existirá uma barra para cada um dos **4** motivos de evasão que foram identificados na planilha


*   ABA - Abandono do curso
*   CAN - Cancelamento Geral do curso	
*   JUB - Jubilamento	
*   Não identificada (vide pasta do aluno)	

Além das 4 citadas, temos essas 3 formas que não foram classificadas:

*   APO - Aluno Especial - Disciplina Isolada
*   APO -Conclusão a Mobilidade Acadêmica Externa - ANDIFES
*   APO -Conclusão da Mobilidade Acadêmica Externa - IAE/IESCE

### Download Dataframe de quantidade de evasao de alunos por motivo e ano
"""

dfEvasao = tabelaPrinc.groupby(['ANO_EVASAO','FORMA_EVASAO']).size().reset_index(name='ALUNOS')
dfEvasao['ANO_EVASAO'] = dfEvasao['ANO_EVASAO'].astype(int)
cond = ['CON - Curso concluído','Sem evasão']
dfEvasao = dfEvasao[~dfEvasao['FORMA_EVASAO'].isin(cond)]
dfEvasao.to_csv('dfEvasao.csv') 
files.download('dfEvasao.csv')

dfEvasao

"""### Download Dataframe de quantidade de ingressos de alunos por ano e modo de ingresso"""

dfIngresso = tabelaPrinc.groupby(['ANO_INGRESSO','PERIODO_INGRESSO', 'FORMA_INGRESSO']).size().reset_index(name='ALUNOS')
dfIngresso['ANO_INGRESSO'] = dfIngresso['ANO_INGRESSO'].astype(int)
dfIngresso.to_csv('dfIngresso.csv') 
files.download('dfIngresso.csv')

dfIngresso

"""### Download Dataframe com os 4 motivos de evasão reconhecidos e qtd de alunos"""

dfFormaEv = tabelaPrinc.groupby(['FORMA_EVASAO']).size().reset_index(name='ALUNOS')
cond = ['CON - Curso concluído','Sem evasão']
dfFormaEv = dfFormaEv[~dfFormaEv['FORMA_EVASAO'].isin(cond)]
dfFormaEv.to_csv('dfFormaEv.csv') 
files.download('dfFormaEv.csv')

#pd.set_option('display.max_colwidth', None)
dfFormaEv

"""### Adicionando somatório das situacoes em grupos"""

somaEvasao = dfFormaEvPura.loc[~dfFormaEvPura['FORMA_EVASAO'].isin(['CON - Curso concluído','Sem evasão']),'ALUNOS'].sum()
somaEvasao
dfFormaEvPura = dfFormaEvPura.append(pd.Series(['Evasão',somaEvasao], index=dfFormaEvPura.columns), ignore_index=True)

"""## Segunda Tarefa

Em seguida, seria interessante ter o perfil dos alunos em três grandes grupos: **antes da lei de cotas na unirio**, **da lei de cotas até a pandemia** e **durante a pandemia**: 
Agrupar por: percentual de formas de evasão, sexo, idade, etc. Acredito que o período da pandemia vai ter de ser estudado à parte, pois possui características bem diferentes.
"""

dfFormaEvPura = tabelaPrinc.groupby(['FORMA_EVASAO']).size().reset_index(name='ALUNOS')

dfFormaEvPura['TIPO_EVASAO'] = dfFormaEvPura.loc[~dfFormaEvPura['FORMA_EVASAO'].isin(['CON - Curso concluído','Sem evasão']), 'TIPO_EVASAO'] = 'EVASAO'

#dfFormaEvPura['TIPO_EVASAO'] = dfFormaEvPura.loc[(dfFormaEvPura.ALUNOS == 335), "TIPO_EVASAO"] = "CONCLUIDO"
dfFormaEvPura["TIPO_EVASAO"].loc[5] = "CONCLUIDO"
dfFormaEvPura["TIPO_EVASAO"].loc[9] = "CURSANDO"

dfFormaEvPura.to_csv('dfFormaEvPura.csv') 
files.download('dfFormaEvPura.csv')

dfFormaEvPura

for i in range(2001, 2021):
    text=f"ano{i}=pd.DataFrame()"
    exec(text)

tabelaPrinc